{"version":3,"file":"data-state.min.js","sources":["data-state.min.js"],"names":["state","module","define","DataState","self","this","get","el","current","getAttribute","split","has","states","indexOf","add","setAttribute","push","join","set","remove","index","length","slice","concat","removeAttribute","toggle","exports","amd","window"],"mappings":"CAAA,SAAWA,EAAOC,EAAQC,GACxB,YAEA,SAASC,KACP,GAAIC,GAAOC,IAOXA,MAAKC,IAAM,SAAUC,GACnB,GAAIC,GAAUD,EAAGE,aAAa,aAI9B,OAHgB,QAAZD,IACFA,EAAUA,EAAQE,MAAM,MAEnBF,GAQTH,KAAKM,IAAM,SAAUJ,EAAII,GACvB,GAAIC,GAASR,EAAKE,IAAIC,EACtB,OAAe,QAAXK,GACK,EAEwB,KAAxBA,EAAOC,QAAQF,IACf,GAGA,GASXN,KAAKS,IAAM,SAAUP,EAAIO,GACvB,GAAIN,GAAUJ,EAAKE,IAAIC,EAEP,QAAZC,EACFD,EAAGQ,aAAa,aAAcD,GAGD,KAAzBN,EAAQK,QAAQC,KAClBN,EAAQQ,KAAKF,GACbP,EAAGQ,aAAa,aAAcP,EAAQS,KAAK,QAIjDZ,KAAKa,IAAMb,KAAKS,IAOhBT,KAAKc,OAAS,SAAUZ,EAAIY,GAC1B,GACIC,GACAC,EAFAb,EAAUJ,EAAKE,IAAIC,EAIP,QAAZC,IACFY,EAAQZ,EAAQK,QAAQM,GACxBE,EAASb,EAAQa,OACH,KAAVD,IACFZ,EAAUA,EAAQc,MAAM,EAAGF,GAAOG,OAAOf,EAAQc,MAAMF,EAAQ,EAAGC,IAC3C,IAAnBb,EAAQa,OACVd,EAAGiB,gBAAgB,cAGnBjB,EAAGQ,aAAa,aAAcP,EAAQS,KAAK,SAWnDZ,KAAKoB,OAAS,SAAUlB,EAAIkB,GACtBrB,EAAKO,IAAIJ,EAAIkB,GACfrB,EAAKe,OAAOZ,EAAIkB,GAGhBrB,EAAKU,IAAIP,EAAIkB,IAQnBzB,EAAQA,GAAS,GAAIG,GAKC,mBAAXF,IAA0BA,EAAOyB,QAC1CzB,EAAOyB,QAAU1B,EACU,kBAAXE,IAAyBA,EAAOyB,IAChDzB,EAAO,WACL,MAAOF,KAGT4B,OAAO5B,MAAQA,GAGhB4B,OAAO5B,MAAO4B,OAAO3B,OAAQ2B,OAAO1B","sourcesContent":["(function (state, module, define) {\n  'use strict';\n\n  function DataState () {\n    var self = this;\n\n    //////////////////////////////\n    // Gets the current data-state\n    //\n    // Returns an array of states, or null\n    //////////////////////////////\n    this.get = function (el) {\n      var current = el.getAttribute('data-state');\n      if (current !== null) {\n        current = current.split(' ');\n      }\n      return current;\n    };\n\n    //////////////////////////////\n    // Has the given state\n    //\n    // Returns true if state is applied\n    //////////////////////////////\n    this.has = function (el, has) {\n      var states = self.get(el);\n      if (states === null) {\n        return false;\n      }\n      else if (states.indexOf(has) !== -1) {\n        return true;\n      }\n      else {\n        return false;\n      }\n    };\n\n    //////////////////////////////\n    // Adds the given state\n    //\n    // Adds the current state to `data-state` attribute\n    //////////////////////////////\n    this.add = function (el, add) {\n      var current = self.get(el);\n\n      if (current === null) {\n        el.setAttribute('data-state', add);\n      }\n      else {\n        if (current.indexOf(add) === -1) {\n          current.push(add);\n          el.setAttribute('data-state', current.join(' '));\n        }\n      }\n    };\n    this.set = this.add;\n\n    //////////////////////////////\n    // Removes the given state\n    //\n    // Removes the current state from `data-state` attribute, if it exists\n    //////////////////////////////\n    this.remove = function (el, remove) {\n      var current = self.get(el),\n          index,\n          length;\n\n      if (current !== null) {\n        index = current.indexOf(remove);\n        length = current.length;\n        if (index !== -1) {\n          current = current.slice(0, index).concat(current.slice(index + 1, length));\n          if (current.length === 0) {\n            el.removeAttribute('data-state');\n          }\n          else {\n            el.setAttribute('data-state', current.join(' '));\n          }\n        }\n      }\n    };\n\n    //////////////////////////////\n    // Toggles the given state\n    //\n    // Removes the current state from `data-state` attribute, if it exists, otherwise adds it\n    //////////////////////////////\n    this.toggle = function (el, toggle) {\n      if (self.has(el, toggle)) {\n        self.remove(el, toggle);\n      }\n      else {\n        self.add(el, toggle);\n      }\n    };\n  }\n\n  //////////////////////////////\n  // We only ever want one instance of state\n  //////////////////////////////\n  state = state || new DataState();\n\n  //////////////////////////////\n  // All of the various exports!\n  //////////////////////////////\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = state;\n  } else if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return state;\n    });\n  } else {\n    window.state = state;\n  }\n\n})(window.state, window.module, window.define);"],"sourceRoot":"/source/"}